//===-- TOYISelDAGToDAG.cpp - A dag to dag inst selector for TOY ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the SPARC target.
//
//===----------------------------------------------------------------------===//

#include "TOYTargetMachine.h"
#include "llvm/Intrinsics.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// TOYDAGToDAGISel - TOY specific code to select TOY machine
/// instructions for SelectionDAG operations.
///
namespace {
class TOYDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the TOY Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const TOYSubtarget &Subtarget;
  TOYTargetMachine& TM;
public:
  explicit TOYDAGToDAGISel(TOYTargetMachine &tm)
    : SelectionDAGISel(tm),
      Subtarget(tm.getSubtarget<TOYSubtarget>()),
      TM(tm) {
  }

  SDNode *Select(SDNode *N);

  // Complex Pattern Selectors.
  bool SelectADDRrr(SDValue N, SDValue &R1, SDValue &R2);
  bool SelectADDRri(SDValue N, SDValue &Base, SDValue &Offset);

  /// SelectInlineAsmMemoryOperand - Implement addressing mode selection for
  /// inline asm expressions.
  virtual bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                            char ConstraintCode,
                                            std::vector<SDValue> &OutOps);

  virtual const char *getPassName() const {
    return "TOY DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "TOYGenDAGISel.inc"

private:
  SDNode* getGlobalBaseReg();
};
}  // end anonymous namespace

SDNode* TOYDAGToDAGISel::getGlobalBaseReg() {
  llvm_unreachable("getGlobalBaseReg not implemented yet!\n");
}

bool TOYDAGToDAGISel::SelectADDRri(SDValue Addr,
                                     SDValue &Base, SDValue &Offset) {
  llvm_unreachable("SelectADDRri not implemented yet!\n");
}

bool TOYDAGToDAGISel::SelectADDRrr(SDValue Addr, SDValue &R1, SDValue &R2) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    R1 = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    R2 = CurDAG->getRegister(TOY::ZERO, MVT::i32);
    return true;
  }

  if (Addr.getOpcode() == ISD::ADD) {
    R1 = Addr.getOperand(0);
    R2 = Addr.getOperand(1);
    return true;
  }

  R1 = Addr;
  R2 = CurDAG->getRegister(TOY::ZERO, MVT::i32);
  return true;
}

const char *TOYTargetLowering::getTargetNodeName(unsigned Opcode) const {
  switch (Opcode) {
  default: return 0;
  case TOYISD::CALL:     return "TOYISD::CALL";
  case TOYISD::BR_CC:    return "TOYISD::BR_CC";
  case TOYISD::CMPEQ:    return "TOYISD::CMPEQ";
  case TOYISD::CMPNE:    return "TOYISD::CMPNE";
  case TOYISD::CMPLT:    return "TOYISD::CMPLT";
  case TOYISD::CMPLE:    return "TOYISD::CMPLE";
  case TOYISD::CMPGT:    return "TOYISD::CMPGT";
  case TOYISD::CMPGE:    return "TOYISD::CMPGE";
  case TOYISD::RET_FLAG: return "TOYIDS::RET_FLAG";
  }
}

SDNode *TOYDAGToDAGISel::Select(SDNode *N) {
  return SelectCode(N);
}

/// SelectInlineAsmMemoryOperand - Implement addressing mode selection for
/// inline asm expressions.
bool
TOYDAGToDAGISel::SelectInlineAsmMemoryOperand(const SDValue &Op,
                                                char ConstraintCode,
                                                std::vector<SDValue> &OutOps) {
    llvm_unreachable("SelectInlineAsmMemoryOperand not implemented yet!\n");
}

/// createSparcISelDag - This pass converts a legalized DAG into a
/// TOY-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createTOYISelDag(TOYTargetMachine &TM) {
  return new TOYDAGToDAGISel(TM);
}
